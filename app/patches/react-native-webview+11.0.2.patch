diff --git a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManager.java b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManager.java
index 2190ae71..35f2037f 100644
--- a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManager.java
+++ b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManager.java
@@ -1,5 +1,27 @@
 package com.reactnativecommunity.webview;
 
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
+import java.nio.charset.UnsupportedCharsetException;
+
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.OkHttpClient.Builder;
+import okhttp3.Request;
+import okhttp3.Response;
+import org.json.JSONException;
+import org.json.JSONObject;
+import java.net.HttpURLConnection;
+
+import android.util.Log;
+
+import android.webkit.ServiceWorkerController;
+import android.webkit.ServiceWorkerClient;
+
+
 import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.app.DownloadManager;
@@ -129,13 +151,19 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
   public static final int COMMAND_LOAD_URL = 7;
   public static final int COMMAND_FOCUS = 8;
 
+  protected static final String MIME_UNKNOWN = "application/octet-stream";
+  protected static final String HTML_ENCODING = "UTF-8";
+  protected static final long BYTES_IN_MEGABYTE = 1000000;
+
   // android commands
   public static final int COMMAND_CLEAR_FORM_DATA = 1000;
   public static final int COMMAND_CLEAR_CACHE = 1001;
   public static final int COMMAND_CLEAR_HISTORY = 1002;
 
   protected static final String REACT_CLASS = "RNCWebView";
-  protected static final String HTML_ENCODING = "UTF-8";
+
+  protected static final String HEADER_CONTENT_TYPE = "content-type";
+
   protected static final String HTML_MIME_TYPE = "text/html";
   protected static final String JAVASCRIPT_INTERFACE = "ReactNativeWebView";
   protected static final String HTTP_METHOD_POST = "POST";
@@ -150,11 +178,20 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
   protected @Nullable String mUserAgent = null;
   protected @Nullable String mUserAgentWithApplicationName = null;
 
+  protected static String userAgent;
+
+  protected static OkHttpClient httpClient;
+
   public RNCWebViewManager() {
     mWebViewConfig = new WebViewConfig() {
       public void configWebView(WebView webView) {
       }
     };
+
+    httpClient = new Builder()
+    .followRedirects(false)
+    .followSslRedirects(false)
+    .build();
   }
 
   public RNCWebViewManager(WebViewConfig webViewConfig) {
@@ -181,6 +218,7 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
   @TargetApi(Build.VERSION_CODES.LOLLIPOP)
   protected WebView createViewInstance(ThemedReactContext reactContext) {
     RNCWebView webView = createRNCWebViewInstance(reactContext);
+    userAgent = webView.getSettings().getUserAgentString();
     setupWebChromeClient(reactContext, webView);
     reactContext.addLifecycleEventListener(webView);
     mWebViewConfig.configWebView(webView);
@@ -246,9 +284,100 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
       }
     });
 
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+        ServiceWorkerController swController = ServiceWorkerController.getInstance();
+        swController.setServiceWorkerClient(new ServiceWorkerClient() {
+            @Override
+            public WebResourceResponse shouldInterceptRequest(WebResourceRequest request) {
+                WebResourceResponse response = RNCWebViewManager.this.shouldInterceptRequest(request, false, webView);
+                if (response != null) {
+                    return response;
+                }
+
+                return super.shouldInterceptRequest(request);
+            }
+        });
+    }
+
     return webView;
   }
 
+  private Boolean urlStringLooksInvalid(String urlString) {
+    return urlString == null ||
+       urlString.trim().equals("") ||
+       !(urlString.startsWith("http") && !urlString.startsWith("www")) ||
+       urlString.contains("|");
+  }
+
+public static Boolean responseRequiresJSInjection(Response response) {
+    if (response.isRedirect()) {
+      return false;
+    }
+    final String contentTypeAndCharset = response.header(HEADER_CONTENT_TYPE, MIME_UNKNOWN);
+    final int responseCode = response.code();
+
+    boolean contentTypeIsHtml = contentTypeAndCharset.startsWith(HTML_MIME_TYPE);
+    boolean responseCodeIsInjectible = responseCode == 200;
+    String responseBody = "";
+
+    if (contentTypeIsHtml && responseCodeIsInjectible) {
+      try {
+        assert response.body() != null;
+        responseBody = response.peekBody(BYTES_IN_MEGABYTE).string();
+      } catch (IOException e) {
+        e.printStackTrace();
+        return false;
+      }
+
+
+      boolean responseBodyContainsHTMLLikeString = responseBody.matches("[\\S\\s]*<[a-z]+[\\S\\s]*>[\\S\\s]*");
+      return responseBodyContainsHTMLLikeString;
+    } else {
+      return false;
+    }
+  }
+
+  public WebResourceResponse shouldInterceptRequest(WebResourceRequest request, Boolean onlyMainFrame, RNCWebView webView) {
+    Uri url = request.getUrl();
+    String urlStr = url.toString();
+
+    if (onlyMainFrame && !request.isForMainFrame() ||
+      urlStringLooksInvalid(urlStr)) {
+      return null;//super.shouldInterceptRequest(webView, request);
+    }
+
+    try {
+      Request req = new Request.Builder()
+      .url(urlStr)
+      .header("User-Agent", userAgent)
+      .build();
+
+      Response response = httpClient.newCall(req).execute();
+
+
+      if (!responseRequiresJSInjection(response)) {
+        if (onlyMainFrame) {
+          RNCWebView reactWebView = (RNCWebView) webView;
+          reactWebView.setInjectForThisURL(urlStr);
+        }
+        return null;
+      }
+
+      InputStream is = response.body().byteStream();
+      MediaType contentType = response.body().contentType();
+      Charset charset = contentType != null ? contentType.charset(StandardCharsets.UTF_8) : StandardCharsets.UTF_8;
+
+      RNCWebView reactWebView = (RNCWebView) webView;
+      if (response.code() == HttpURLConnection.HTTP_OK) {
+      is = new InputStreamWithInjectedJS(is, reactWebView.injectedJSBeforeContentLoaded, charset);
+      }
+
+      return new WebResourceResponse("text/html", charset.name(), is);
+    } catch (Exception e) {
+      return null;
+    }
+  }
+
   @ReactProp(name = "javaScriptEnabled")
   public void setJavaScriptEnabled(WebView view, boolean enabled) {
     view.getSettings().setJavaScriptEnabled(enabled);
@@ -778,13 +907,103 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
     }
   }
 
-  protected static class RNCWebViewClient extends WebViewClient {
+  public static class InputStreamWithInjectedJS extends InputStream {
+    private InputStream pageIS;
+    private InputStream scriptIS;
+    private Charset charset;
+    private static final String REACT_CLASS = "InputStreamWithInjectedJS";
+    private static Map<Charset, String> script = new HashMap<>();
 
+    private boolean hasJS = false;
+    private boolean headWasFound = false;
+    private boolean scriptWasInjected = false;
+    private StringBuffer contentBuffer = new StringBuffer();
+
+    private static Charset getCharset(String charsetName) {
+        Charset cs = StandardCharsets.UTF_8;
+        try {
+            if (charsetName != null) {
+                cs = Charset.forName(charsetName);
+            }
+        } catch (UnsupportedCharsetException e) {
+            Log.d(REACT_CLASS, "wrong charset: " + charsetName);
+        }
+
+        return cs;
+    }
+
+    private static InputStream getScript(Charset charset) {
+        String js = script.get(charset);
+        if (js == null) {
+            String defaultJs = script.get(StandardCharsets.UTF_8);
+            js = new String(defaultJs.getBytes(StandardCharsets.UTF_8), charset);
+            script.put(charset, js);
+        }
+
+        return new ByteArrayInputStream(js.getBytes(charset));
+    }
+
+    InputStreamWithInjectedJS(InputStream is, String js, Charset charset) {
+        if (js == null) {
+            this.pageIS = is;
+        } else {
+            this.hasJS = true;
+            this.charset = charset;
+            Charset cs = StandardCharsets.UTF_8;
+            String jsScript = "<script>" + js + "</script>";
+            script.put(cs, jsScript);
+            this.pageIS = is;
+        }
+    }
+
+    @Override
+    public int read() throws IOException {
+        if (scriptWasInjected || !hasJS) {
+            return pageIS.read();
+        }
+
+        if (!scriptWasInjected && headWasFound) {
+            int nextByte = scriptIS.read();
+            if (nextByte == -1) {
+                scriptIS.close();
+                scriptWasInjected = true;
+                return pageIS.read();
+            } else {
+                return nextByte;
+            }
+        }
+
+        if (!headWasFound) {
+            int nextByte = pageIS.read();
+            contentBuffer.append((char) nextByte);
+            int bufferLength = contentBuffer.length();
+            if (nextByte == 62 && bufferLength >= 6) {
+                if (contentBuffer.substring(bufferLength - 6).equals("<head>")) {
+                    this.scriptIS = getScript(this.charset);
+                    headWasFound = true;
+                }
+            }
+
+            return nextByte;
+        }
+
+        return pageIS.read();
+    }
+
+  }
+
+  protected class RNCWebViewClient extends WebViewClient {
+
+    protected static final String REACT_CLASS = "RNCWebViewClient";
     protected boolean mLastLoadFailed = false;
     protected @Nullable
     ReadableArray mUrlPrefixesForDefaultIntent;
     protected RNCWebView.ProgressChangedFilter progressChangedFilter = null;
     protected @Nullable String ignoreErrFailedForThisURL = null;
+    protected @Nullable String injectForThisURL = null;
+    public void setInjectForThisURL(@Nullable String url) {
+      injectForThisURL = url;
+    }
 
     public void setIgnoreErrFailedForThisURL(@Nullable String url) {
       ignoreErrFailedForThisURL = url;
@@ -808,14 +1027,27 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
       super.onPageStarted(webView, url, favicon);
       mLastLoadFailed = false;
 
-      RNCWebView reactWebView = (RNCWebView) webView;
-      reactWebView.callInjectedJavaScriptBeforeContentLoaded();
+      WritableMap eventData = createWebViewEvent(webView, url);
+      if (TextUtils.equals(url, injectForThisURL)) {
+        eventData.putBoolean("injectForThisURL", true);
+      }
+      injectForThisURL = null;
 
       dispatchEvent(
         webView,
         new TopLoadingStartEvent(
           webView.getId(),
-          createWebViewEvent(webView, url)));
+          eventData));
+    }
+
+    @Override
+    public WebResourceResponse shouldInterceptRequest(WebView webView, WebResourceRequest request) {
+        WebResourceResponse response = RNCWebViewManager.this.shouldInterceptRequest(request, true, (RNCWebView)webView);
+        if (response != null) {
+            return response;
+        }
+
+        return super.shouldInterceptRequest(webView, request);
     }
 
     @Override
@@ -870,6 +1102,21 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
     @TargetApi(Build.VERSION_CODES.N)
     @Override
     public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
+
+      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+
+             /*
+              * In order to follow redirects properly, we return null in interceptRequest().
+              * Doing this breaks the web3 injection on the resulting page, so we have to reload to
+              * make sure web3 is available.
+              * */
+
+          if (request.isForMainFrame() && request.isRedirect()) {
+              view.loadUrl(request.getUrl().toString());
+              return true;
+          }
+      }
+
       final String url = request.getUrl().toString();
       return this.shouldOverrideUrlLoading(view, url);
     }
@@ -1245,6 +1492,10 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
       progressChangedFilter = new ProgressChangedFilter();
     }
 
+    public void setInjectForThisURL(String url) {
+      mRNCWebViewClient.setInjectForThisURL(url);
+    }
+
     public void setIgnoreErrFailedForThisURL(String url) {
       mRNCWebViewClient.setIgnoreErrFailedForThisURL(url);
     }
diff --git a/node_modules/react-native-webview/apple/RNCWebView.m b/node_modules/react-native-webview/apple/RNCWebView.m
index 02005db5..1c89b1ab 100644
--- a/node_modules/react-native-webview/apple/RNCWebView.m
+++ b/node_modules/react-native-webview/apple/RNCWebView.m
@@ -801,11 +801,13 @@ - (void)                    webView:(WKWebView *)webView
 - (void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(void))completionHandler
 {
 #if !TARGET_OS_OSX
-  UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:message preferredStyle:UIAlertControllerStyleAlert];
-  [alert addAction:[UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
-    completionHandler();
-  }]];
-  [[self topViewController] presentViewController:alert animated:YES completion:NULL];
+  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.7 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
+    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:message preferredStyle:UIAlertControllerStyleAlert];
+    [alert addAction:[UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
+      completionHandler();
+    }]];
+    [[self topViewController] presentViewController:alert animated:YES completion:NULL];
+  });
 #else
   NSAlert *alert = [[NSAlert alloc] init];
   [alert setMessageText:message];